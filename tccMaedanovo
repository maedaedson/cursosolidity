// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

import "https://github.com/jeffprestes/cursosolidity/blob/master/bradesco_token_aberto.sol";

// contrato 0x03Fe1c3268E56915aB91Ff78d95C48a69506badf
contract TccMaedaTreinamento {

    ExercicioToken private exercicioToken;

    string primeiroNome;
    string sobreNome;
    string agencia;
    string conta;
    address payable endereco;
    
    constructor(
        string memory _primeiroNome,
        string memory _sobreNome,        
        string memory _agencia,
        string memory _conta) payable {

        exercicioToken = ExercicioToken(0x89A2E711b2246B586E51f579676BE2381441A0d0);
        primeiroNome = _primeiroNome;
        sobreNome = _sobreNome;
        agencia = _agencia;
        conta = _conta;
        endereco = payable(msg.sender);

    }

        function mSaldo() external view returns(uint256) {
        return exercicioToken.balanceOf(address(this));
    }

    
    function gerarTokenParaEuCliente(uint256 _amount) public returns (bool){
        return exercicioToken.mint(address(this), _amount);
    }

    
    function transfer(address to, uint256 amount) public returns (bool){
        return exercicioToken.transfer(to, amount);
    }

    function saldoContratoCriptomoedaNativa() public view returns (uint){
        return address(this).balance;
    }

    function transfereMoedaNativa(address payable _to, uint256 _amount) public payable  {
        require(msg.sender == endereco);
        _to.transfer(_amount);
    }

        receive() external payable {}


}
